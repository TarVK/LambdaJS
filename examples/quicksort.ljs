// Natural number constructors, peano numbers (Zero and Successor) and functions
Z;
S nat;

lessThan Z (S x) = True;
lessThan x Z = False;
lessThan (S x) (S y) = lessThan x y;

// Boolean constructors
False;
True;

// List constructors (linked list of sorts)
Cons head tail;
Nill;

concat Nill list = list;
concat (Cons head tail) list = Cons head (concat tail list);

// Pair constructor
Pair el1 el2;

// A function to append a value to either the left or right list, given a Pair of lists
append val (Pair list1 list2) True = Pair (Cons val list1) list2;
append val (Pair list1 list2) False = Pair list1 (Cons val list2);  

// Quicksort (except it's not quick at all when compiled)
partition val Nill = Pair Nill Nill;
partition val (Cons head tail) 
    = append head (partition val tail) (lessThan head val);
    
quicksort Nill = Nill;
quicksort (Cons head tail) = quicksort head (partition head tail);

quicksort val (Pair lessThan moreThan) 
    = concat 
        (quicksort lessThan) 
        (Cons val (quicksort moreThan)); 

// Perform quicksort on some sample data
v0 = Z;
v1 = S v0;
v2 = S v1;
v3 = S v2;
v4 = S v3;
list = Cons v3 (Cons v4 (Cons v1 (Cons v0 Nill)));

output quicksort list;

// Compiled code at: _=>($Y=>($D0=>($D1=>$D0(_)(_=>$0=>$1=>$2=>$3=>$4=>$5=>$6=>$7=>$0(_))(_=>False=>$D0(_)(_=>$0=>$1=>$2=>$3=>$4=>$5=>$6=>$7=>$1(_))(_=>True=>$D0(_)(_=>$0=>$1=>$2=>$3=>$4=>$5=>$6=>$7=>$2(_))(_=>Undefined=>$D0(_)(_=>$0=>$1=>$2=>$3=>$4=>$5=>$6=>$7=>$8=>$9=>$5(_)($0)($1))(_=>Cons=>$D0(_)(_=>$0=>$1=>$2=>$3=>$4=>$5=>$6=>$7=>$8=>$5(_)($0))(_=>S=>$D0(_)(_=>$0=>$1=>$2=>$3=>$4=>$5=>$6=>$7=>$5(_))(_=>Nill=>$D0(_)(_=>$0=>$1=>$2=>$3=>$4=>$5=>$6=>$7=>$6(_))(_=>Z=>$D0(_)(_=>$0=>$1=>$2=>$3=>$4=>$5=>$6=>$7=>$8=>$9=>$9(_)($0)($1))(_=>Pair=>$D1(_)(_=>lessThan=>$0=>$0(_)(_=>$1=>$1(_)(_=>Undefined(_))(_=>Undefined(_))(_=>Undefined(_))(_=>$1$0=>$1$1=>Undefined(_))(_=>$1$0=>Undefined(_))(_=>Undefined(_))(_=>False(_))(_=>$1$0=>$1$1=>Undefined(_)))(_=>$1=>$1(_)(_=>Undefined(_))(_=>Undefined(_))(_=>Undefined(_))(_=>$1$0=>$1$1=>Undefined(_))(_=>$1$0=>Undefined(_))(_=>Undefined(_))(_=>False(_))(_=>$1$0=>$1$1=>Undefined(_)))(_=>$1=>$1(_)(_=>Undefined(_))(_=>Undefined(_))(_=>Undefined(_))(_=>$1$0=>$1$1=>Undefined(_))(_=>$1$0=>Undefined(_))(_=>Undefined(_))(_=>False(_))(_=>$1$0=>$1$1=>Undefined(_)))(_=>$0$0=>$0$1=>$1=>$1(_)(_=>Undefined(_))(_=>Undefined(_))(_=>Undefined(_))(_=>$1$0=>$1$1=>Undefined(_))(_=>$1$0=>Undefined(_))(_=>Undefined(_))(_=>False(_))(_=>$1$0=>$1$1=>Undefined(_)))(_=>$0$0=>$1=>$1(_)(_=>Undefined(_))(_=>Undefined(_))(_=>Undefined(_))(_=>$1$0=>$1$1=>Undefined(_))(_=>$1$0=>lessThan(_)(_=>$0$0(_))(_=>$1$0(_)))(_=>Undefined(_))(_=>False(_))(_=>$1$0=>$1$1=>Undefined(_)))(_=>$1=>$1(_)(_=>Undefined(_))(_=>Undefined(_))(_=>Undefined(_))(_=>$1$0=>$1$1=>Undefined(_))(_=>$1$0=>Undefined(_))(_=>Undefined(_))(_=>False(_))(_=>$1$0=>$1$1=>Undefined(_)))(_=>$1=>$1(_)(_=>Undefined(_))(_=>Undefined(_))(_=>Undefined(_))(_=>$1$0=>$1$1=>Undefined(_))(_=>$1$0=>True(_))(_=>Undefined(_))(_=>False(_))(_=>$1$0=>$1$1=>Undefined(_)))(_=>$0$0=>$0$1=>$1=>$1(_)(_=>Undefined(_))(_=>Undefined(_))(_=>Undefined(_))(_=>$1$0=>$1$1=>Undefined(_))(_=>$1$0=>Undefined(_))(_=>Undefined(_))(_=>False(_))(_=>$1$0=>$1$1=>Undefined(_))))(_=>lessThan=>$D1(_)(_=>append=>$0=>$1=>$1(_)(_=>Undefined(_))(_=>Undefined(_))(_=>Undefined(_))(_=>$1$0=>$1$1=>Undefined(_))(_=>$1$0=>Undefined(_))(_=>Undefined(_))(_=>Undefined(_))(_=>$1$0=>$1$1=>$2=>$2(_)(_=>Pair(_)(_=>$1$0(_))(_=>(Cons(_)(_=>$0(_))(_=>$1$1(_)))))(_=>Pair(_)(_=>(Cons(_)(_=>$0(_))(_=>$1$0(_))))(_=>$1$1(_)))(_=>Undefined(_))(_=>$2$0=>$2$1=>Undefined(_))(_=>$2$0=>Undefined(_))(_=>Undefined(_))(_=>Undefined(_))(_=>$2$0=>$2$1=>Undefined(_))))(_=>append=>$D1(_)(_=>partition=>$0=>$1=>$1(_)(_=>Undefined(_))(_=>Undefined(_))(_=>Undefined(_))(_=>$1$0=>$1$1=>append(_)(_=>$1$0(_))(_=>(partition(_)(_=>$0(_))(_=>$1$1(_))))(_=>(lessThan(_)(_=>$1$0(_))(_=>$0(_)))))(_=>$1$0=>Undefined(_))(_=>Pair(_)(_=>Nill(_))(_=>Nill(_)))(_=>Undefined(_))(_=>$1$0=>$1$1=>Undefined(_)))(_=>partition=>$D1(_)(_=>concat=>$0=>$0(_)(_=>Undefined(_))(_=>Undefined(_))(_=>Undefined(_))(_=>$0$0=>$0$1=>$1=>Cons(_)(_=>$0$0(_))(_=>(concat(_)(_=>$0$1(_))(_=>$1(_)))))(_=>$0$0=>Undefined(_))(_=>$1=>$1(_))(_=>Undefined(_))(_=>$0$0=>$0$1=>Undefined(_)))(_=>concat=>$D1(_)(_=>quicksort=>$0=>$0(_)(_=>$1=>$1(_)(_=>Undefined(_))(_=>Undefined(_))(_=>Undefined(_))(_=>$1$0=>$1$1=>Undefined(_))(_=>$1$0=>Undefined(_))(_=>Undefined(_))(_=>Undefined(_))(_=>$1$0=>$1$1=>concat(_)(_=>(quicksort(_)(_=>$1$0(_))))(_=>(Cons(_)(_=>$0(_))(_=>(quicksort(_)(_=>$1$1(_))))))))(_=>$1=>$1(_)(_=>Undefined(_))(_=>Undefined(_))(_=>Undefined(_))(_=>$1$0=>$1$1=>Undefined(_))(_=>$1$0=>Undefined(_))(_=>Undefined(_))(_=>Undefined(_))(_=>$1$0=>$1$1=>concat(_)(_=>(quicksort(_)(_=>$1$0(_))))(_=>(Cons(_)(_=>$0(_))(_=>(quicksort(_)(_=>$1$1(_))))))))(_=>$1=>$1(_)(_=>Undefined(_))(_=>Undefined(_))(_=>Undefined(_))(_=>$1$0=>$1$1=>Undefined(_))(_=>$1$0=>Undefined(_))(_=>Undefined(_))(_=>Undefined(_))(_=>$1$0=>$1$1=>concat(_)(_=>(quicksort(_)(_=>$1$0(_))))(_=>(Cons(_)(_=>$0(_))(_=>(quicksort(_)(_=>$1$1(_))))))))(_=>$0$0=>$0$1=>quicksort(_)(_=>$0$0(_))(_=>(partition(_)(_=>$0$0(_))(_=>$0$1(_)))))(_=>$0$0=>$1=>$1(_)(_=>Undefined(_))(_=>Undefined(_))(_=>Undefined(_))(_=>$1$0=>$1$1=>Undefined(_))(_=>$1$0=>Undefined(_))(_=>Undefined(_))(_=>Undefined(_))(_=>$1$0=>$1$1=>concat(_)(_=>(quicksort(_)(_=>$1$0(_))))(_=>(Cons(_)(_=>$0(_))(_=>(quicksort(_)(_=>$1$1(_))))))))(_=>Nill(_))(_=>$1=>$1(_)(_=>Undefined(_))(_=>Undefined(_))(_=>Undefined(_))(_=>$1$0=>$1$1=>Undefined(_))(_=>$1$0=>Undefined(_))(_=>Undefined(_))(_=>Undefined(_))(_=>$1$0=>$1$1=>concat(_)(_=>(quicksort(_)(_=>$1$0(_))))(_=>(Cons(_)(_=>$0(_))(_=>(quicksort(_)(_=>$1$1(_))))))))(_=>$0$0=>$0$1=>$1=>$1(_)(_=>Undefined(_))(_=>Undefined(_))(_=>Undefined(_))(_=>$1$0=>$1$1=>Undefined(_))(_=>$1$0=>Undefined(_))(_=>Undefined(_))(_=>Undefined(_))(_=>$1$0=>$1$1=>concat(_)(_=>(quicksort(_)(_=>$1$0(_))))(_=>(Cons(_)(_=>$0(_))(_=>(quicksort(_)(_=>$1$1(_)))))))))(_=>quicksort=>$D0(_)(_=>Z(_))(_=>v0=>$D0(_)(_=>S(_)(_=>v0(_)))(_=>v1=>$D0(_)(_=>S(_)(_=>v1(_)))(_=>v2=>$D0(_)(_=>S(_)(_=>v2(_)))(_=>v3=>$D0(_)(_=>S(_)(_=>v3(_)))(_=>v4=>$D0(_)(_=>Cons(_)(_=>v3(_))(_=>(Cons(_)(_=>v4(_))(_=>(Cons(_)(_=>v1(_))(_=>(Cons(_)(_=>v0(_))(_=>Nill(_)))))))))(_=>list=>quicksort(_)(_=>list(_))))))))))))))))))))))(_=>$0=>c=>(f=>c(_)(f))(_=>$Y(_)($0))))(_=>$0=>c=>c(_)($0)))(_=>f=>(x=>f(_)(_=>x(x)))(x=>f(_)(_=>x(x))))